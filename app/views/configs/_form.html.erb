<link href="https://cdn.jsdelivr.net/npm/vscode-codicons@0.0.17/dist/codicon.min.css" rel="stylesheet">
<script type="module">
  import * as monaco from "https://cdn.jsdelivr.net/npm/monaco-editor@latest/+esm"

  document.querySelectorAll(".monaco-editor").forEach((container) => {
    const target = document.getElementById(container.dataset.target)

    const editor = monaco.editor.create(
      container,
      {
        value: target.value,
        theme: "vs-dark",
        language: "yaml",
        fontSize: 14,
        fontFamily: '"Roboto Mono", monospace',
        automaticLayout: true,
        tabSize: 2,
        fixedOverflowWidgets: true,
        padding: { top: 12 },
        minimap: { enabled: false },
        inlineSuggest: { enabled: true },
        quickSuggestions: { strings: true },
        scrollBeyondLastLine: false,
      },
    )

    editor.onDidChangeModelContent(() => {
      target.value = editor.getValue()
    })

    editor.onDidContentSizeChange(() => {
      const contentHeight = Math.max(editor.getContentHeight()) + 24
	    container.style.height = `${contentHeight}px`;
    })
  })
</script>

<%= form_with model: model do |f| %>
  <% if config_error = f.object.errors[:config].presence %>
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-5" role="alert">
      <p class="font-bold">Failed to generate Talos configuration</p>
      <%= simple_format config_error.first %>
    </div>
  <% end %>

  <%= f.text_field :name, placeholder: "staging" %>
  <%# Hiding install_image since it doesn't actually do anything if maintenance mode is already %>
  <%# installed via a disk image (which we do when bootstrapping). Can change it back to text_field %>
  <%# when/if Talos starts making proper use of the configuration. %>
  <%= f.hidden_field :install_image, readonly: true, hint: "Gets passed into the --imagedisk argument for talosctl gen config." %>
  <%= f.text_field :kubernetes_version, placeholder: "1.26.3", hint: "Gets passed into the --kubernetes-version argument for talosctl gen config." %>

  <%= f.label :kubespan, class: "mb-5 block" do %>
    <h3 class="font-bold mb-1 text-gray-900">Enable Kubespan</h3>
    <%= f.check_box :kubespan, class: "mr-1" %>
    <span class="text-sm text-gray-400">Enables the --with-kubespan argument during config generation</span>
  <% end %>

  <%= f.text_editor :patch, label: "Config Patch YAML", required: false, hint: "Gets passed into the --config-patch argument for talosctl gen config." %>
  <%= f.text_editor :patch_control_plane, label: "Control Plane Config Patch YAML", required: false, hint: "Gets passed into the --config-patch-control-plane argument for talosctl gen config." %>
  <%= f.text_editor :patch_worker, label: "Worker Config Patch YAML", required: false, hint: "Gets passed into the --config-patch-worker argument for talosctl gen config." %>
  <%= f.submit "Save" %>
<% end %>
