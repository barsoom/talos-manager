<%= turbo_frame_tag "servers-actions-dialog" do %>
  <dialog id="server-actions-dialog" class="backdrop:backdrop-blur-sm backdrop:bg-gray-100 backdrop:bg-opacity-30 p-6 rounded-lg shadow-lg">
    <form method="dialog" class="flex mb-4">
      <h2 class="text-2xl">Reboot Command</h2>
      <button class="ml-auto text-gray-500 hover:text-gray-700"><%= icon_close %></button>
    </form>
    <p class="text-gray-600 mb-4">Use the following command to gracefully reboot the server:</p>

    <div class="relative group">
      <span class="absolute opacity-0 group-hover:opacity-100 right-1 top-1 text-white text-sm py-1 px-3 rounded transition-opacity duration-300 pointer-events-none z-10">Click to copy</span>
      <div
        class="bg-gray-900 text-white text-sm p-5 rounded-lg mb-4 hover:bg-gray-800 cursor-pointer"
        onclick="
          const toolTip = this.parentElement.querySelector('.absolute')
          const code = this.querySelector('code').textContent
          navigator.clipboard.writeText(code).then(() => {
            toolTip.innerText = 'Copied!'
          })
        "
      >
      <code class="whitespace-pre">WORKER=<%= @server.name %>
kubectl drain $WORKER --ignore-daemonsets --delete-local-data &&
  time talosctl reboot -n $WORKER &&
  kubectl uncordon $WORKER</code>
    </div>

    <p class="text-gray-600 max-w-[60rem]">
      If you are rebooting a node containing databases you may want to manually execute a failover via <code class="p-1 bg-gray-100 rounded-sm">k node:failover <%= @server.name %> first</code> to ensure there are no masters on the node before it reboots for more control.
    </p>
  </dialog>

  <script>
    // NOTE: We have to explicitly run showModal as just adding the open attribute won't enable the backdrop element
    document.getElementById("server-actions-dialog").showModal()
  </script>
<% end %>
